# -*- coding: utf-8 -*-
"""classifier_pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16VbVtySoAK_3CaouZpYLH4eVG1tGrN2H
"""

import tensorflow as tf
import transformers
from transformers import TFAutoModel, AutoTokenizer
import numpy as np
import sys
from .num2disease import num2disease

def disease_classifier(input_string):
    class BERTForClassification(tf.keras.Model):

        def __init__(self, bert_model, num_classes):
            super().__init__()
            self.bert = bert_model
            self.fc = tf.keras.layers.Dense(num_classes, activation='softmax')

        def call(self, inputs):
            x = self.bert(inputs)[1]
            return self.fc(x)

    model = TFAutoModel.from_pretrained("bert-base-uncased")

    classifier = BERTForClassification(model, num_classes=1082)
    #Load these from your laptop
    classifier.load_weights('./Disease_Model/disease_classifier_model')

    # Preprocess a string to be in the right format for 'predict'.
    tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

    # Input string
    example = input_string

    encoding = tokenizer(example, padding=True, truncation=True, return_tensors='tf')

    #tokenised2 = tf.data.Dataset.from_tensor_slices(tokenised)
    #print(type(tokenised2))

    input_ids = encoding['input_ids']
    attention_mask = encoding['attention_mask']
    token_type_ids = encoding['token_type_ids']

    inputs = {
        'input_ids': input_ids,
        'attention_mask': attention_mask,
        'token_type_ids': token_type_ids
    }

    example_prediction = classifier.predict(inputs)
    final_prediction = np.argmax(example_prediction)
    final_pred_prob = example_prediction[0][final_prediction]
    
    top_diseases = []

    for i in range (0, 5):

        #Extract index with maximum probability in its element
        pred = np.argmax(example_prediction)
        #Extract its probability and convert to string
        pred_prob = example_prediction[0][pred]
        pred_prob = f"{pred_prob * 100:.1f}"
        #Set the element of highest probability to zero
        example_prediction[0][pred] = 0
        #Find index->disease mapping
        pred = num2disease(str(pred))
        
        #Append disease and probability to array
        top_diseases.append(f"{pred}: {pred_prob} %")
        


    return top_diseases, f"{final_prediction}", f"{final_pred_prob}"